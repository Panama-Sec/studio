// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview An AI-powered tool that analyzes project needs and recommends Vront Solutions services and showcases suitable project case studies.
 *
 * - serviceRecommendation - A function that handles the service recommendation process.
 * - ServiceRecommendationInput - The input type for the serviceRecommendation function.
 * - ServiceRecommendationOutput - The return type for the serviceRecommendation function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ServiceRecommendationInputSchema = z.object({
  projectNeeds: z
    .string()
    .describe('A description of the visitor\'s project needs.'),
});
export type ServiceRecommendationInput = z.infer<typeof ServiceRecommendationInputSchema>;

const ServiceRecommendationOutputSchema = z.object({
  recommendedServices: z
    .array(z.string())
    .describe('A list of recommended services based on the project needs.'),
  relevantCaseStudies: z
    .array(z.string())
    .describe('A list of relevant project case studies based on the project needs.'),
});
export type ServiceRecommendationOutput = z.infer<typeof ServiceRecommendationOutputSchema>;

export async function serviceRecommendation(input: ServiceRecommendationInput): Promise<ServiceRecommendationOutput> {
  return serviceRecommendationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'serviceRecommendationPrompt',
  input: {schema: ServiceRecommendationInputSchema},
  output: {schema: ServiceRecommendationOutputSchema},
  prompt: `You are an AI assistant that analyzes project needs and recommends relevant services and project case studies from Vront Solutions.

  Based on the following project needs:
  {{projectNeeds}}

  Recommend services and project case studies that would be most suitable. Only use services and case studies that Vront Solutions would be likely to have.
  Output the recommended services and relevant project case studies as a JSON object.`,
});

const serviceRecommendationFlow = ai.defineFlow(
  {
    name: 'serviceRecommendationFlow',
    inputSchema: ServiceRecommendationInputSchema,
    outputSchema: ServiceRecommendationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
